{"ast":null,"code":"import _defineProperty from \"/Users/rayeespk/workspace/react/assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/rayeespk/workspace/react/assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rayeespk/workspace/react/assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/rayeespk/workspace/react/assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/rayeespk/workspace/react/assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/rayeespk/workspace/react/assessment/src/containers/auth/auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/ui/input/input';\nimport Button from '../../components/ui/button/button';\nimport Spinner from '../../components/ui/spinner/spinner';\nimport rakbankLogo from '../../assets/images/rakbank-logo.jpg';\nimport './auth.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight, faUser, faLock } from '@fortawesome/free-solid-svg-icons';\n\nvar Auth = /*#__PURE__*/function (_Component) {\n  _inherits(Auth, _Component);\n\n  var _super = _createSuper(Auth);\n\n  function Auth() {\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: false\n    };\n\n    _this.inputChangedHandler = function (event, controlName) {\n      var updatedControls = updateObject(_this.state.controls, _defineProperty({}, controlName, updateObject(_this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updatedControls\n      });\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n\n      _this.props.onAuth(_this.state.controls.email.value, _this.state.controls.password.value, _this.state.isSignup);\n    };\n\n    _this.switchAuthModeHandler = function () {\n      _this.setState(function (prevState) {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n        this.props.onSetAuthRedirectPath();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          class: \"input-container\",\n          key: formElement.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }\n        }, formElement.config.elementConfig.type === 'password' ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLock,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faUser,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          inputClass: \"icon-input\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }\n        }));\n      });\n\n      if (this.props.loading) {\n        form = /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 20\n          }\n        });\n      }\n\n      var errorMessage = null;\n\n      if (this.props.error) {\n        errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n          className: \"error-txt\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }\n        }, this.props.error.message);\n      }\n\n      var authRedirect = null;\n\n      if (this.props.isAuthenticated) {\n        authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n          to: this.props.authRedirectPath,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 28\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"login-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, authRedirect, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }, form, errorMessage, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"w-100 txt-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        btnType: \"Success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }, this.state.isSignup ? 'SIGNUP' : 'SIGNIN', \" \", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faArrowRight,\n        size: \"xs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 34\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"logo-head\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: rakbankLogo,\n        className: \"img-fluid\",\n        alt: \"Rak Bank\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"a\", {\n        clicked: this.switchAuthModeHandler,\n        btnType: \"Danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }\n      }, \"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP'));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuth: function onAuth(email, password, isSignup) {\n      return dispatch(actions.auth(email, password, isSignup));\n    },\n    onSetAuthRedirectPath: function onSetAuthRedirectPath() {\n      return dispatch(actions.setAuthRedirectPath('/'));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/rayeespk/workspace/react/assessment/src/containers/auth/auth.js"],"names":["React","Component","connect","Redirect","Input","Button","Spinner","rakbankLogo","actions","updateObject","checkValidity","FontAwesomeIcon","faArrowRight","faUser","faLock","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/ui/input/input';\nimport Button from '../../components/ui/button/button';\nimport Spinner from '../../components/ui/spinner/spinner';\nimport rakbankLogo from '../../assets/images/rakbank-logo.jpg';\nimport './auth.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowRight, faUser, faLock } from '@fortawesome/free-solid-svg-icons'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: false\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        });\n        this.setState({ controls: updatedControls });\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup };\n        });\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <div class=\"input-container\" key={formElement.id}>\n                {formElement.config.elementConfig.type === 'password' ? (\n                    <FontAwesomeIcon icon={faLock} />\n                ) : (\n                    <FontAwesomeIcon icon={faUser} />\n                )}\n                \n                <Input\n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)} \n                    inputClass=\"icon-input\"\n                    />\n            </div>\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if (this.props.error) {\n            errorMessage = (\n                <p className=\"error-txt\">{this.props.error.message}</p>\n            );\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className=\"login-form\">\n                {authRedirect}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    {errorMessage}\n                    <div className=\"w-100 txt-center\">\n                        <Button btnType=\"Success\">\n                            {this.state.isSignup ? 'SIGNUP' : 'SIGNIN'}\n                            {\" \"}<FontAwesomeIcon icon={faArrowRight} size=\"xs\" />\n                        </Button>\n                    </div>\n                    <div className=\"logo-head\">\n                        <img src={rakbankLogo} className=\"img-fluid\" alt=\"Rak Bank\" />\n                    </div>\n                </form>\n                <a\n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</a>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}